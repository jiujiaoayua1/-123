<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <script>
        var tree = {
    "id": 0,
    "name": "root",
    "left": {
        "id": 1,
        "name": "Simon",
        "left": {
            "id": 3,
            "name": "Carl",
            "left": {
                "id": 7,
                "name": "Lee",
                "left": {
                    "id": 11,
                    "name": "Fate"
                }
            },
            "right": {
                "id": 8,
                "name": "Annie",
                "left": {
                    "id": 12,
                    "name": "Saber"
                }
            }
        },
        "right": {
            "id": 4,
            "name": "Tony",
            "left": {
                "id": 9,
                "name": "Candy"
            }
        }
    },
    "right": {
        "id": 2,
        "name": "right",
        "left": {
            "id": 5,
            "name": "Carl",
        },
        "right": {
            "id": 6,
            "name": "Carl",
            "right": {
                "id": 10,
                "name": "Kai"
            }        
        }
    }
}
    // 假设id和name均不会重复，根据输入name找到对应的id
    function findIdByName(name) {
    var id;
    function find(obj){
        if(obj != null){
            if(obj.name === name){
                id = obj.id;
            }
            find(obj.left);
            find(obj.right);
        }
    }
    find(tree);
return id;
}

console.log("用过名字找id");
console.log(findIdByName('Saber'));
console.log(findIdByName('Fate'));
console.log(findIdByName("Kai"))
// 假设id和name均不会重复，根据输入id找到对应的name
function findNameById(id) {
    var name;
    function find(obj) {
        if(obj != null){
            if(obj.id = id){
                name = obj.name;
            }
            find(obj.left);
            find(obj.right);
        }
    }
    find(tree);
    return name;
}
// 把这个对象中所有的名字以“前序遍历”的方式全部输出到console中 DLR前序遍历
function getListWithDLR() {
    var arr = [];
    function name(obj){
        if(obj){
            arr.push(obj.name);
            name(obj.left);
            name(obj.right);
        }
    }
    name(tree);
    console.log(arr);
}            
    getListWithDLR();
    /* 把这个对象中所有的名字以“中序遍历”的方式全部输出到console中 LDR*/
function getListWithLDR() {
    var arr = []
    function name(obj){
        if(obj){
            name(obj.left)
            arr.push(obj.name);
            name(obj.right);
        }
    }
    name(tree);
    console.log(arr);
}
console.log(123123)
getListWithLDR()
// 把这个对象中所有的名字以“后序遍历”的方式全部输出到console中 LRD
function getListWithLRD() {
    var arr = [];
    function find(obj) {
        if(obj){
            find(obj.left);
            find(obj.right);
            arr.push(obj.name);
        }
    }
    find(tree);
    console.log(arr)
}
getListWithLRD()
    </script>
</body>
</html>
